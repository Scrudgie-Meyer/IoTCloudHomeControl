@model WebApp.Models.EventCreatorModel

@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Localizer

@{
    ViewData["Title"] = Localizer["Title"];
}
<div class="container py-4">
    <h3>@Localizer["CreateScheduledEvent"]</h3>

    <form asp-action="CreateSingle" method="post">
        <div class="mb-3">
            <label asp-for="DeviceId" class="form-label">@Localizer["Device"]</label>
            <select asp-for="DeviceId" class="form-select" required
                    asp-items="new SelectList((List<WebApp.Models.DeviceOptionModel>)ViewBag.DeviceOptions, nameof(DeviceOptionModel.Id), nameof(DeviceOptionModel.Name))">
                <option value="">@Localizer["SelectDevice"]</option>
            </select>
            <span asp-validation-for="DeviceId" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="EventType" class="form-label">@Localizer["EventType"]</label>
            <select asp-for="EventType" class="form-select" id="eventTypeSelect" required>
                <option value="">@Localizer["SelectEventType"]</option>
                <option value="PushNotification">@Localizer["PushNotification"]</option>
                <option value="AudioMessage">@Localizer["AudioMessage"]</option>
            </select>
            <span asp-validation-for="EventType" class="text-danger"></span>
        </div>


        <div class="mb-3" id="pushMessageDiv" style="display: none;">
            <label asp-for="Description" class="form-label">@Localizer["PushMessage"]</label>
            <input asp-for="Description" class="form-control" />
        </div>

        <div class="mb-3" id="audioUrlDiv" style="display: none;">
            <label asp-for="Description" class="form-label">@Localizer["AudioFileURL"]</label>
            <input asp-for="Description" class="form-control" />
        </div>

        <div class="mb-3">
            <label asp-for="ScheduledTime" class="form-label">@Localizer["ScheduledTime"]</label>
            <input asp-for="ScheduledTime" type="datetime-local" class="form-control" id="scheduledTimeInput" />
        </div>

        <div class="form-check mb-3">
            <input asp-for="IsRecurring" class="form-check-input" id="IsRecurringToggle" />
            <label asp-for="IsRecurring" class="form-check-label">@Localizer["Recurring"]</label>
        </div>

        <div class="mb-3" id="recurrenceIntervalDiv" style="display:none;">
            <label asp-for="RecurrenceInterval" class="form-label">@Localizer["RecurrenceInterval"]</label>
            <input asp-for="RecurrenceInterval"
                   type="time"
                   step="1"
                   min="00:05:00"
                   class="form-control"
                   value="06:00:00" />
        </div>

        <button type="submit" class="btn btn-primary">@Localizer["Create"]</button>
    </form>
</div>


@section Scripts {
    <script>
        const toggle = document.getElementById('IsRecurringToggle');
        const intervalDiv = document.getElementById('recurrenceIntervalDiv');

        function updateVisibility() {
            intervalDiv.style.display = toggle.checked ? 'block' : 'none';
        }

        toggle.addEventListener('change', updateVisibility);
        window.addEventListener('DOMContentLoaded', updateVisibility);

        const eventTypeSelect = document.getElementById('eventTypeSelect');
        const pushDiv = document.getElementById('pushMessageDiv');
        const audioDiv = document.getElementById('audioUrlDiv');

        function toggleFields() {
            const selected = eventTypeSelect.value;
            pushDiv.style.display = selected === 'PushNotification' ? 'block' : 'none';
            audioDiv.style.display = selected === 'AudioMessage' ? 'block' : 'none';
        }

        eventTypeSelect.addEventListener('change', toggleFields);
        window.addEventListener('DOMContentLoaded', toggleFields);

        document.addEventListener("DOMContentLoaded", function () {
            const input = document.getElementById("scheduledTimeInput");

            const now = new Date();
            now.setMinutes(now.getMinutes() + 5);
            now.setSeconds(0, 0);

            const pad = (n) => n.toString().padStart(2, '0');
            const localDatetime = `${now.getFullYear()}-${pad(now.getMonth() + 1)}-${pad(now.getDate())}T${pad(now.getHours())}:${pad(now.getMinutes())}`;

            input.min = localDatetime;
            input.value = localDatetime;

            input.addEventListener('change', function () {
                if (input.value < input.min) {
                    input.value = input.min;
                }
            });
        });
    </script>
}

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - "master"  # Trigger the workflow on push to the master branch

env:
  AWS_REGION: us-east-2                   # Example AWS region, change to your preferred region
  ECR_REPOSITORY_WEBAPP: your-ecr-repo-webapp # ECR repository for the WebApp container
  ECR_REPOSITORY_SERVER: your-ecr-repo-server # ECR repository for the Server container
  ECS_SERVICE_WEBAPP: your-ecs-service-webapp # ECS service for the WebApp
  ECS_SERVICE_SERVER: your-ecs-service-server # ECS service for the Server
  ECS_CLUSTER: your-ecs-cluster-name       # ECS cluster name
  ECS_TASK_DEFINITION_WEBAPP: ecs-task-def-webapp.json # Path to the ECS task definition for WebApp
  ECS_TASK_DEFINITION_SERVER: ecs-task-def-server.json # Path to the ECS task definition for Server
  CONTAINER_NAME_WEBAPP: webapp-container-name # Container name for WebApp in task definition
  CONTAINER_NAME_SERVER: server-container-name # Container name for Server in task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Log in to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push WebApp Docker image to ECR
      id: build-webapp-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}  # Use commit hash as the tag for versioning
      run: |
        # Build the WebApp Docker container
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG -f WebApp/Dockerfile .
        # Push the WebApp image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG
        # Set the WebApp image for ECS task definition
        echo "webapp-image=$ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build, tag, and push Server Docker image to ECR
      id: build-server-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}  # Use commit hash as the tag for versioning
      run: |
        # Build the Server Docker container
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_SERVER:$IMAGE_TAG -f Server/Dockerfile .
        # Push the Server image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_SERVER:$IMAGE_TAG
        # Set the Server image for ECS task definition
        echo "server-image=$ECR_REGISTRY/$ECR_REPOSITORY_SERVER:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update ECS WebApp task definition with the new image
      id: task-def-webapp
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION_WEBAPP }}  # Path to ECS task definition for WebApp
        container-name: ${{ env.CONTAINER_NAME_WEBAPP }}        # Container name in ECS task definition
        image: ${{ steps.build-webapp-image.outputs.webapp-image }} # Image URL from ECR for WebApp

    - name: Update ECS Server task definition with the new image
      id: task-def-server
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION_SERVER }}  # Path to ECS task definition for Server
        container-name: ${{ env.CONTAINER_NAME_SERVER }}        # Container name in ECS task definition
        image: ${{ steps.build-server-image.outputs.server-image }} # Image URL from ECR for Server

    - name: Deploy updated ECS task definition for WebApp to ECS service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-webapp.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_WEBAPP }}  # ECS WebApp service
        cluster: ${{ env.ECS_CLUSTER }}  # ECS cluster name
        wait-for-service-stability: true  # Wait until the service is stable

    - name: Deploy updated ECS task definition for Server to ECS service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-server.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_SERVER }}  # ECS Server service
        cluster: ${{ env.ECS_CLUSTER }}  # ECS cluster name
        wait-for-service-stability: true  # Wait until the service is stable
